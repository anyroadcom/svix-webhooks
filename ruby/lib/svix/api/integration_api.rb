=begin
#Svix API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'cgi'

module Svix
  class IntegrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Integration
    # Create an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integration_in [IntegrationIn] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key The request&#39;s idempotency key
    # @return [IntegrationOut]
    def v1_integration_create(app_id, integration_in, opts = {})
      data, _status_code, _headers = v1_integration_create_with_http_info(app_id, integration_in, opts)
      data
    end

    # Create Integration
    # Create an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integration_in [IntegrationIn] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key The request&#39;s idempotency key
    # @return [Array<(IntegrationOut, Integer, Hash)>] IntegrationOut data, response status code and response headers
    def v1_integration_create_with_http_info(app_id, integration_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationApi.v1_integration_create ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling IntegrationApi.v1_integration_create"
      end
      if @api_client.config.client_side_validation && app_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_create, the character length must be smaller than or equal to 256.'
      end

      if @api_client.config.client_side_validation && app_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_create, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if @api_client.config.client_side_validation && app_id !~ pattern
        fail ArgumentError, "invalid value for 'app_id' when calling IntegrationApi.v1_integration_create, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'integration_in' is set
      if @api_client.config.client_side_validation && integration_in.nil?
        fail ArgumentError, "Missing the required parameter 'integration_in' when calling IntegrationApi.v1_integration_create"
      end
      # resource path
      local_var_path = '/api/v1/app/{app_id}/integration/'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'idempotency-key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(integration_in)

      # return_type
      return_type = opts[:debug_return_type] || 'IntegrationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"IntegrationApi.v1_integration_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationApi#v1_integration_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Integration
    # Delete an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_integration_delete(app_id, integ_id, opts = {})
      v1_integration_delete_with_http_info(app_id, integ_id, opts)
      nil
    end

    # Delete Integration
    # Delete an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_integration_delete_with_http_info(app_id, integ_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationApi.v1_integration_delete ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling IntegrationApi.v1_integration_delete"
      end
      if @api_client.config.client_side_validation && app_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_delete, the character length must be smaller than or equal to 256.'
      end

      if @api_client.config.client_side_validation && app_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_delete, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if @api_client.config.client_side_validation && app_id !~ pattern
        fail ArgumentError, "invalid value for 'app_id' when calling IntegrationApi.v1_integration_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'integ_id' is set
      if @api_client.config.client_side_validation && integ_id.nil?
        fail ArgumentError, "Missing the required parameter 'integ_id' when calling IntegrationApi.v1_integration_delete"
      end
      # resource path
      local_var_path = '/api/v1/app/{app_id}/integration/{integ_id}/'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'integ_id' + '}', CGI.escape(integ_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"IntegrationApi.v1_integration_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationApi#v1_integration_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Integration
    # Get an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [IntegrationOut]
    def v1_integration_get(app_id, integ_id, opts = {})
      data, _status_code, _headers = v1_integration_get_with_http_info(app_id, integ_id, opts)
      data
    end

    # Get Integration
    # Get an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationOut, Integer, Hash)>] IntegrationOut data, response status code and response headers
    def v1_integration_get_with_http_info(app_id, integ_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationApi.v1_integration_get ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling IntegrationApi.v1_integration_get"
      end
      if @api_client.config.client_side_validation && app_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_get, the character length must be smaller than or equal to 256.'
      end

      if @api_client.config.client_side_validation && app_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_get, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if @api_client.config.client_side_validation && app_id !~ pattern
        fail ArgumentError, "invalid value for 'app_id' when calling IntegrationApi.v1_integration_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'integ_id' is set
      if @api_client.config.client_side_validation && integ_id.nil?
        fail ArgumentError, "Missing the required parameter 'integ_id' when calling IntegrationApi.v1_integration_get"
      end
      # resource path
      local_var_path = '/api/v1/app/{app_id}/integration/{integ_id}/'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'integ_id' + '}', CGI.escape(integ_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IntegrationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"IntegrationApi.v1_integration_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationApi#v1_integration_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Integration Key
    # Get an integration's key.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [IntegrationKeyOut]
    def v1_integration_get_key(app_id, integ_id, opts = {})
      data, _status_code, _headers = v1_integration_get_key_with_http_info(app_id, integ_id, opts)
      data
    end

    # Get Integration Key
    # Get an integration&#39;s key.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationKeyOut, Integer, Hash)>] IntegrationKeyOut data, response status code and response headers
    def v1_integration_get_key_with_http_info(app_id, integ_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationApi.v1_integration_get_key ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling IntegrationApi.v1_integration_get_key"
      end
      if @api_client.config.client_side_validation && app_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_get_key, the character length must be smaller than or equal to 256.'
      end

      if @api_client.config.client_side_validation && app_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_get_key, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if @api_client.config.client_side_validation && app_id !~ pattern
        fail ArgumentError, "invalid value for 'app_id' when calling IntegrationApi.v1_integration_get_key, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'integ_id' is set
      if @api_client.config.client_side_validation && integ_id.nil?
        fail ArgumentError, "Missing the required parameter 'integ_id' when calling IntegrationApi.v1_integration_get_key"
      end
      # resource path
      local_var_path = '/api/v1/app/{app_id}/integration/{integ_id}/key/'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'integ_id' + '}', CGI.escape(integ_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IntegrationKeyOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"IntegrationApi.v1_integration_get_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationApi#v1_integration_get_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Integrations
    # List the application's integrations.
    # @param app_id [String] The app&#39;s ID or UID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of returned items
    # @option opts [String] :iterator The iterator returned from a prior invocation
    # @return [ListResponseIntegrationOut]
    def v1_integration_list(app_id, opts = {})
      data, _status_code, _headers = v1_integration_list_with_http_info(app_id, opts)
      data
    end

    # List Integrations
    # List the application&#39;s integrations.
    # @param app_id [String] The app&#39;s ID or UID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of returned items
    # @option opts [String] :iterator The iterator returned from a prior invocation
    # @return [Array<(ListResponseIntegrationOut, Integer, Hash)>] ListResponseIntegrationOut data, response status code and response headers
    def v1_integration_list_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationApi.v1_integration_list ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling IntegrationApi.v1_integration_list"
      end
      if @api_client.config.client_side_validation && app_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_list, the character length must be smaller than or equal to 256.'
      end

      if @api_client.config.client_side_validation && app_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_list, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if @api_client.config.client_side_validation && app_id !~ pattern
        fail ArgumentError, "invalid value for 'app_id' when calling IntegrationApi.v1_integration_list, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 250
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IntegrationApi.v1_integration_list, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IntegrationApi.v1_integration_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/v1/app/{app_id}/integration/'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'iterator'] = opts[:'iterator'] if !opts[:'iterator'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListResponseIntegrationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"IntegrationApi.v1_integration_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationApi#v1_integration_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rotate Integration Key
    # Rotate the integration's key. The previous key will be immediately revoked.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key The request&#39;s idempotency key
    # @return [IntegrationKeyOut]
    def v1_integration_rotate_key(app_id, integ_id, opts = {})
      data, _status_code, _headers = v1_integration_rotate_key_with_http_info(app_id, integ_id, opts)
      data
    end

    # Rotate Integration Key
    # Rotate the integration&#39;s key. The previous key will be immediately revoked.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key The request&#39;s idempotency key
    # @return [Array<(IntegrationKeyOut, Integer, Hash)>] IntegrationKeyOut data, response status code and response headers
    def v1_integration_rotate_key_with_http_info(app_id, integ_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationApi.v1_integration_rotate_key ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling IntegrationApi.v1_integration_rotate_key"
      end
      if @api_client.config.client_side_validation && app_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_rotate_key, the character length must be smaller than or equal to 256.'
      end

      if @api_client.config.client_side_validation && app_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_rotate_key, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if @api_client.config.client_side_validation && app_id !~ pattern
        fail ArgumentError, "invalid value for 'app_id' when calling IntegrationApi.v1_integration_rotate_key, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'integ_id' is set
      if @api_client.config.client_side_validation && integ_id.nil?
        fail ArgumentError, "Missing the required parameter 'integ_id' when calling IntegrationApi.v1_integration_rotate_key"
      end
      # resource path
      local_var_path = '/api/v1/app/{app_id}/integration/{integ_id}/key/rotate/'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'integ_id' + '}', CGI.escape(integ_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'idempotency-key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IntegrationKeyOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"IntegrationApi.v1_integration_rotate_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationApi#v1_integration_rotate_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Integration
    # Update an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param integration_update [IntegrationUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [IntegrationOut]
    def v1_integration_update(app_id, integ_id, integration_update, opts = {})
      data, _status_code, _headers = v1_integration_update_with_http_info(app_id, integ_id, integration_update, opts)
      data
    end

    # Update Integration
    # Update an integration.
    # @param app_id [String] The app&#39;s ID or UID
    # @param integ_id [String] The integ&#39;s ID
    # @param integration_update [IntegrationUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationOut, Integer, Hash)>] IntegrationOut data, response status code and response headers
    def v1_integration_update_with_http_info(app_id, integ_id, integration_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationApi.v1_integration_update ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling IntegrationApi.v1_integration_update"
      end
      if @api_client.config.client_side_validation && app_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_update, the character length must be smaller than or equal to 256.'
      end

      if @api_client.config.client_side_validation && app_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "app_id" when calling IntegrationApi.v1_integration_update, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if @api_client.config.client_side_validation && app_id !~ pattern
        fail ArgumentError, "invalid value for 'app_id' when calling IntegrationApi.v1_integration_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'integ_id' is set
      if @api_client.config.client_side_validation && integ_id.nil?
        fail ArgumentError, "Missing the required parameter 'integ_id' when calling IntegrationApi.v1_integration_update"
      end
      # verify the required parameter 'integration_update' is set
      if @api_client.config.client_side_validation && integration_update.nil?
        fail ArgumentError, "Missing the required parameter 'integration_update' when calling IntegrationApi.v1_integration_update"
      end
      # resource path
      local_var_path = '/api/v1/app/{app_id}/integration/{integ_id}/'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'integ_id' + '}', CGI.escape(integ_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(integration_update)

      # return_type
      return_type = opts[:debug_return_type] || 'IntegrationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"IntegrationApi.v1_integration_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationApi#v1_integration_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
