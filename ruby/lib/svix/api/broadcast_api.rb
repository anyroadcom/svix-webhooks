=begin
#Svix API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'cgi'

module Svix
  class BroadcastApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Broadcast Message
    # Creates a background task to send the same message to each application in your organization
    # @param message_broadcast_in [MessageBroadcastIn] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key The request&#39;s idempotency key
    # @return [MessageBroadcastOut]
    def create_broadcast_message(message_broadcast_in, opts = {})
      data, _status_code, _headers = create_broadcast_message_with_http_info(message_broadcast_in, opts)
      data
    end

    # Create Broadcast Message
    # Creates a background task to send the same message to each application in your organization
    # @param message_broadcast_in [MessageBroadcastIn] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key The request&#39;s idempotency key
    # @return [Array<(MessageBroadcastOut, Integer, Hash)>] MessageBroadcastOut data, response status code and response headers
    def create_broadcast_message_with_http_info(message_broadcast_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastApi.create_broadcast_message ...'
      end
      # verify the required parameter 'message_broadcast_in' is set
      if @api_client.config.client_side_validation && message_broadcast_in.nil?
        fail ArgumentError, "Missing the required parameter 'message_broadcast_in' when calling BroadcastApi.create_broadcast_message"
      end
      # resource path
      local_var_path = '/api/v1/msg/broadcast/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'idempotency-key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(message_broadcast_in)

      # return_type
      return_type = opts[:debug_return_type] || 'MessageBroadcastOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"BroadcastApi.create_broadcast_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastApi#create_broadcast_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
