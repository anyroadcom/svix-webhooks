=begin
#Svix API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module Svix
  class TemplateIn
    attr_accessor :description

    attr_accessor :feature_flag

    attr_accessor :filter_types

    attr_accessor :instructions

    attr_accessor :instructions_link

    attr_accessor :kind

    attr_accessor :logo

    attr_accessor :name

    attr_accessor :transformation

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'description' => :'description',
        :'feature_flag' => :'featureFlag',
        :'filter_types' => :'filterTypes',
        :'instructions' => :'instructions',
        :'instructions_link' => :'instructionsLink',
        :'kind' => :'kind',
        :'logo' => :'logo',
        :'name' => :'name',
        :'transformation' => :'transformation'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'description' => :'String',
        :'feature_flag' => :'String',
        :'filter_types' => :'Array<String>',
        :'instructions' => :'String',
        :'instructions_link' => :'String',
        :'kind' => :'TransformationTemplateKind',
        :'logo' => :'String',
        :'name' => :'String',
        :'transformation' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'feature_flag',
        :'filter_types',
        :'instructions_link',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Svix::TemplateIn` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Svix::TemplateIn`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = ''
      end

      if attributes.key?(:'feature_flag')
        self.feature_flag = attributes[:'feature_flag']
      end

      if attributes.key?(:'filter_types')
        if (value = attributes[:'filter_types']).is_a?(Array)
          self.filter_types = value
        end
      end

      if attributes.key?(:'instructions')
        self.instructions = attributes[:'instructions']
      else
        self.instructions = ''
      end

      if attributes.key?(:'instructions_link')
        self.instructions_link = attributes[:'instructions_link']
      else
        self.instructions_link = 'null'
      end

      if attributes.key?(:'kind')
        self.kind = attributes[:'kind']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'transformation')
        self.transformation = attributes[:'transformation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@feature_flag.nil? && @feature_flag.to_s.length > 256
        invalid_properties.push('invalid value for "feature_flag", the character length must be smaller than or equal to 256.')
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if !@feature_flag.nil? && @feature_flag !~ pattern
        invalid_properties.push("invalid value for \"feature_flag\", must conform to the pattern #{pattern}.")
      end

      if !@filter_types.nil? && @filter_types.length < 1
        invalid_properties.push('invalid value for "filter_types", number of items must be greater than or equal to 1.')
      end

      if @logo.nil?
        invalid_properties.push('invalid value for "logo", logo cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @transformation.nil?
        invalid_properties.push('invalid value for "transformation", transformation cannot be nil.')
      end

      if @transformation.to_s.length > 51200
        invalid_properties.push('invalid value for "transformation", the character length must be smaller than or equal to 51200.')
      end

      if @transformation.to_s.length < 10
        invalid_properties.push('invalid value for "transformation", the character length must be great than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@feature_flag.nil? && @feature_flag.to_s.length > 256
      return false if !@feature_flag.nil? && @feature_flag !~ Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      return false if !@filter_types.nil? && @filter_types.length < 1
      return false if @logo.nil?
      return false if @name.nil?
      return false if @transformation.nil?
      return false if @transformation.to_s.length > 51200
      return false if @transformation.to_s.length < 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] feature_flag Value to be assigned
    def feature_flag=(feature_flag)
      if !feature_flag.nil? && feature_flag.to_s.length > 256
        fail ArgumentError, 'invalid value for "feature_flag", the character length must be smaller than or equal to 256.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\-_.]+$/)
      if !feature_flag.nil? && feature_flag !~ pattern
        fail ArgumentError, "invalid value for \"feature_flag\", must conform to the pattern #{pattern}."
      end

      @feature_flag = feature_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] filter_types Value to be assigned
    def filter_types=(filter_types)
      if !filter_types.nil? && filter_types.length < 1
        fail ArgumentError, 'invalid value for "filter_types", number of items must be greater than or equal to 1.'
      end

      @filter_types = filter_types
    end

    # Custom attribute writer method with validation
    # @param [Object] transformation Value to be assigned
    def transformation=(transformation)
      if transformation.nil?
        fail ArgumentError, 'transformation cannot be nil'
      end

      if transformation.to_s.length > 51200
        fail ArgumentError, 'invalid value for "transformation", the character length must be smaller than or equal to 51200.'
      end

      if transformation.to_s.length < 10
        fail ArgumentError, 'invalid value for "transformation", the character length must be great than or equal to 10.'
      end

      @transformation = transformation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          feature_flag == o.feature_flag &&
          filter_types == o.filter_types &&
          instructions == o.instructions &&
          instructions_link == o.instructions_link &&
          kind == o.kind &&
          logo == o.logo &&
          name == o.name &&
          transformation == o.transformation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, feature_flag, filter_types, instructions, instructions_link, kind, logo, name, transformation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Svix.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
